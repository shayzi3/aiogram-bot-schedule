
from aiogram import Router
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
from loguru import logger

from Keyboards import reply
from data_pack.shedule import get_json
from data_pack.commands_ import show_today, show_tomorrow, day_of_week
from data_pack.database_ import (
     start_database,
     remove_me_database
)

router = Router()

@router.message(CommandStart())
async def start(message: Message) -> None:
     answer = await start_database(message.from_user.id, message.from_user.full_name)
     
     if answer:
          logger.info(f'New user. Name: {message.from_user.full_name}. ID: {message.from_user.id}')
          
     await message.answer(
          text=f'<b>{message.from_user.first_name.capitalize()}</b>, —ç—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —à–∫–æ–ª—ã ‚Ññ47 –≥.–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑. –í—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥–µ /help', 
          reply_markup=reply.board,
          parse_mode=ParseMode.HTML
     )
     
     
          
@router.message(Command(commands=['today', 'Today', 'day', 'Day']))
async def today(message: Message, command: CommandObject) -> None:
     if not command.args:
          return await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å. –ü—Ä–∏–º–µ—Ä: /today 10–ë')
     
     data: dict = await get_json()
     if command.args.upper() not in data.keys():
          return await message.answer('–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–ª–∞—Å—Å! –ü—Ä–∏–º–µ—Ä: /today 10–ë')
     
     output = await show_today(data, command.args.upper())
     if output == 1:
          return await message.answer('–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç! –ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòÅ')
     
     await message.answer(text=output, parse_mode=ParseMode.HTML)
     
     
     
@router.message(Command(commands=['tomorrow', 'next']))
async def tomorrow(message: Message, command: CommandObject) -> None:
     if not command.args:
          return await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å. –ü—Ä–∏–º–µ—Ä: /next 10–ë')
     
     data = await get_json()
     if command.args.upper() not in data.keys():
          return await message.answer('–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–ª–∞—Å—Å! –ü—Ä–∏–º–µ—Ä: /next 10–ë')
        
     output = await show_tomorrow(data, command.args.upper())
     if output == 1:
          return await message.answer('–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤! –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å üòÅ')
     
     await message.answer(text=output, parse_mode=ParseMode.HTML)
     
     
     
@router.message(Command(commands=['removeme', 'rme']))
async def remove_me(message: Message, command: CommandObject) -> None:
     if not command.args:
          return await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å. –ü—Ä–∏–º–µ—Ä: /rme 10–ë')
     
     data_json = await get_json()
     if command.args.upper() not in data_json.keys():
          return await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–∏–º–µ—Ä: /rme 10–ë')
     
     data_answer = await remove_me_database(command.args.upper(), message.from_user.id)
     if not data_answer:
          return await message.answer('–ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É /me')
     
     else:
          await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–ª–∞—Å—Å –Ω–∞ {command.args}')
          
          
@router.message(Command(commands=['count', 'cn']))
async def day_count(message: Message, command: CommandObject) -> None:
     if not command.args:
          return await message.answer('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä: /count 1')
     
     req = await day_of_week(command.args, message.from_user.id)
     if req is None:
          return await message.answer('–¢—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü—Ä–∏–º–µ—Ä: /count [–Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏]')
     
     if req is False:
          return await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /me')
     
     if req is True:
          return message.answer('–†–∞–∑–≤–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –µ—Å—Ç—å —É—Ä–æ–∫–∏??')
     
     await message.answer(req, parse_mode=ParseMode.HTML)
     
     
     
          
          
@router.message(Command(commands=['help', 'hp']))
async def helper(message: Message) -> None:
     value = '''<b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b> 
     \n/today [–∫–ª–∞—Å—Å] - —É–∑–Ω–∞—Ç—å —É—Ä–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è. 
     \n/next [–∫–ª–∞—Å—Å] - —É–∑–Ω–∞—Ç—å —É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
     \n/me - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –∫–ª–∞—Å—Å –∏ –ø–æ—Å–ª–µ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.
     \n/rme [–∫–ª–∞—Å—Å] - —Å–º–µ–Ω–∏—Ç—å –≤–∞—à –∫–ª–∞—Å—Å.
     \n/call - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ.
     \n/count [–Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏] - —É–∑–Ω–∞—Ç—å —É—Ä–æ–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å.
     \n–°–µ–≥–æ–¥–Ω—è üßæ - –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /me –∏–ª–∏ /rme –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
     \n–ó–∞–≤—Ç—Ä–∞ üìú - –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /me –∏–ª–∏ /rme –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
     \n–ó–≤–æ–Ω–∫–∏ üîä - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –¥–≤—É—Ö —Å–º–µ–Ω.'''
     
     await message.answer(value, parse_mode=ParseMode.HTML)
     
     

     
     